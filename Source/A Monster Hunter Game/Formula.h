#pragma once

#include <cmath>

/**
 Formulas to calculate Attack, Defense, Health, based on Level, and constants for gameplay.
 Declaring functions here gave linker errors for some reason, so changed them into lambda.
 */

static const int kMaterialToEquipmentCost = 3;
static const int kBaseHealthPerLevel = 50;

auto LevelToAttack = [](const int level){
    return std::ceil(level * std::log(level)) + 2;
};

auto LevelToDefense = [](const int level){
    return std::ceil(level / 2.);
};

auto LevelToHealth = [](const int level){
    return level * kBaseHealthPerLevel;
};

/**
 Based on above formulas, below is chart for
 level / attack / hp / number of attacks to land a kill
 1   : 2     : 50    : 50
 2   : 4     : 100   : 34
 3   : 6     : 150   : 38  // Some weird curve at early levels, but smooth out later on
 4   : 8     : 200   : 34
 5   : 11    : 250   : 32
 6   : 13    : 300   : 30
 7   : 16    : 350   : 30
 8   : 19    : 400   : 27
 9   : 22    : 450   : 27
 10  : 26    : 500   : 24
 11  : 29    : 550   : 24
 12  : 32    : 600   : 24
 13  : 36    : 650   : 23
 14  : 39    : 700   : 22
 15  : 43    : 750   : 22
 16  : 47    : 800   : 21
 17  : 51    : 850   : 21
 18  : 55    : 900   : 20
 19  : 58    : 950   : 20
 20  : 62    : 1000  : 20
 21  : 66    : 1050  : 20
 22  : 71    : 1100  : 19
 23  : 75    : 1150  : 19
 24  : 79    : 1200  : 18
 25  : 83    : 1250  : 18
 26  : 87    : 1300  : 18
 27  : 91    : 1350  : 18
 28  : 96    : 1400  : 18
 29  : 100   : 1450  : 18
 30  : 105   : 1500  : 17
 31  : 109   : 1550  : 17
 32  : 113   : 1600  : 17
 33  : 118   : 1650  : 17
 34  : 122   : 1700  : 17
 35  : 127   : 1750  : 17
 36  : 132   : 1800  : 16
 37  : 136   : 1850  : 16
 38  : 141   : 1900  : 16
 39  : 145   : 1950  : 16
 40  : 150   : 2000  : 16
 41  : 155   : 2050  : 16
 42  : 159   : 2100  : 16
 43  : 164   : 2150  : 16
 44  : 169   : 2200  : 15
 45  : 174   : 2250  : 15
 46  : 179   : 2300  : 15
 47  : 183   : 2350  : 15
 48  : 188   : 2400  : 15
 49  : 193   : 2450  : 15
 50  : 198   : 2500  : 15
 51  : 203   : 2550  : 15
 52  : 208   : 2600  : 15
 53  : 213   : 2650  : 15
 54  : 218   : 2700  : 15
 55  : 223   : 2750  : 15
 56  : 228   : 2800  : 14
 57  : 233   : 2850  : 14
 58  : 238   : 2900  : 14
 59  : 243   : 2950  : 14
 60  : 248   : 3000  : 14
 61  : 253   : 3050  : 14
 62  : 258   : 3100  : 14
 63  : 264   : 3150  : 14
 64  : 269   : 3200  : 14
 65  : 274   : 3250  : 14
 66  : 279   : 3300  : 14
 67  : 284   : 3350  : 14
 68  : 289   : 3400  : 14
 69  : 295   : 3450  : 14
 70  : 300   : 3500  : 14
 71  : 305   : 3550  : 14
 72  : 310   : 3600  : 14
 73  : 316   : 3650  : 14
 74  : 321   : 3700  : 14
 75  : 326   : 3750  : 14
 76  : 332   : 3800  : 13
 77  : 337   : 3850  : 13
 78  : 342   : 3900  : 13
 79  : 348   : 3950  : 13
 80  : 353   : 4000  : 13
 81  : 358   : 4050  : 13
 82  : 364   : 4100  : 13
 83  : 369   : 4150  : 13
 84  : 375   : 4200  : 13
 85  : 380   : 4250  : 13
 86  : 386   : 4300  : 13
 87  : 391   : 4350  : 13
 88  : 397   : 4400  : 13
 89  : 402   : 4450  : 13
 90  : 407   : 4500  : 13
 91  : 413   : 4550  : 13
 92  : 419   : 4600  : 13
 93  : 424   : 4650  : 13
 94  : 430   : 4700  : 13
 95  : 435   : 4750  : 13
 96  : 441   : 4800  : 13
 97  : 446   : 4850  : 13
 98  : 452   : 4900  : 13
 99  : 457   : 4950  : 13
 100 : 463   : 5000  : 13
*/
